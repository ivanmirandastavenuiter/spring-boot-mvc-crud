package com.ims.ch33tz.controller;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ims.ch33tz.entity.User;
import com.ims.ch33tz.service.UserService;
import com.ims.ch33tz.exception.EntityNotFoundException;

@Controller
@RequestMapping("/user")
public class UserController {
	
	@Autowired
	private UserService userService;
	
    @GetMapping("/list")
    public String findAll(Map<String, Object> model,
    					  @RequestParam(required = false)String success) {
    	
        List<User> usersList = userService.findAll();
        model.put("usersList", usersList);
        
        if (success != null && success.equals("true")) {
    		model.put("success", true);
    	}
        
        return "list";
    }
    
    @GetMapping("/add")
    public String showAddUserForm(@ModelAttribute("user")User user,
    							  @RequestParam(required = false)String success,
    							  Map<String, Object> model) {
    	
    	if (success != null && success.equals("true")) {
    		model.put("success", true);
    	}
    	
        return "add";
    }
    
    @PostMapping("/add")
    public String addUser(@Valid @ModelAttribute("user")User user,
    													BindingResult result,
    													RedirectAttributes redirectAttributes) {
    	
    	if (result.hasErrors()) {
    		return "add";
    	}
    	
    	userService.save(user);
    	redirectAttributes.addFlashAttribute("success", true);
        return "redirect:/user/add";
    }
    
    @GetMapping("/update/{id}")
    public String showUpdateUserForm(@ModelAttribute("user")User user,
    								 @PathVariable Long id,
    								 Map<String, Object> model,
    								 @RequestParam(required = false)String success) {

    	User selectedUser = !userService.findById(id).equals(Optional.empty()) ? 
    				userService.findById(id).get() : null;
    				
    	if (selectedUser == null) {
    		throw new EntityNotFoundException("Entity not found for this id");
    	}
    	
    	if (success != null && success.equals("true")) {
    		model.put("success", true);
    	}
    
    	model.put("selectedUser", selectedUser);
    	return "update";
    }
    
    @PostMapping("/update/{id}")
    public String updateUser(@Valid @ModelAttribute("user")User user,
    													   BindingResult result,
    													   @PathVariable Long id,
    													   RedirectAttributes redirectAttributes) {
    	
    	if (result.hasErrors()) {
    		return "update";
    	}
    	
    	userService.save(user);
    	redirectAttributes.addFlashAttribute("success", true);
        return "redirect:/user/update/" + user.getId();
    }
    
    @PostMapping("/delete/{id}")
    public String deleteUser(@PathVariable Long id, RedirectAttributes redirectAttributes) {
    	
    	User selectedUser = !userService.findById(id).equals(Optional.empty()) ? 
				userService.findById(id).get() : null;
				
		if (selectedUser == null) {
			throw new EntityNotFoundException("Entity not found for this id");
		}
    	
		redirectAttributes.addFlashAttribute("success", true);
    	userService.delete(selectedUser);
        return "redirect:/user/list";
    }
	
}
